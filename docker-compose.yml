services:
  postgres:
    image: postgres:15
    container_name: auction-postgres
    environment:
      POSTGRES_MULTIPLE_DATABASES: authdb,userdb,auctiondb,biddb,paymentdb,notificationdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-databases.sh:/docker-entrypoint-initdb.d/init-databases.sh
    networks:
      - auction-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    container_name: auction-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - auction-net
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.2.1
    container_name: auction-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    networks:
      - auction-net
    healthcheck:
#      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092 --version"]
      interval: 10s
      timeout: 5s
      retries: 5

  discovery-server:
    build: ./discovery-server
    container_name: auction-discovery-server
    ports:
      - "8761:8761"
    networks:
      - auction-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 10

  gateway-service:
    build: ./gateway-service
    container_name: auction-gateway-service
    depends_on:
      discovery-server:
        condition: service_healthy
    ports:
      - "8086:8080"
    networks:
      - auction-net
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka/
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  auth-service:
    build: ./auth-service
    container_name: auction-auth-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka/
      - SPRING_DATASOURCE_URL=jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/authdb
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - JWT_SECRET=404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970
      - JWT_EXPIRATION=86400000
      - AUTH_REDIS_HOST=redis
      - AUTH_REDIS_PORT=6379
      - AUTH_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - AUTH_KAFKA_PRODUCER_GROUP_ID=auth-service-group
      - AUTH_KAFKA_TOPIC_USER_CREATED=user.created
      - AUTH_KAFKA_TOPIC_LOGIN=user.login
      - EUREKA_SERVER_URL=http://discovery-server:8761/eureka/
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    depends_on:
      discovery-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8087:8080"
    networks:
      - auction-net


  user-service:
    build: ./user-service
    container_name: auction-user-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka/
      - SPRING_DATASOURCE_URL=jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/userdb
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - JWT_SECRET=404E635266556A586E3272357538782F413F4428472B4B6250645367566B5970
      - JWT_EXPIRATION=86400000
      - USER_REDIS_HOST=redis
      - USER_REDIS_PORT=6379
      - USER_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - USER_KAFKA_CONSUMER_GROUP_ID=user-service-group
      - USER_KAFKA_TOPIC_USER_CREATED=user.created
      - EUREKA_SERVER_URL=http://discovery-server:8761/eureka/
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    depends_on:
      discovery-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - "8083:8080"
    networks:
      - auction-net

  auction-service:
    build: ./auction-service
    container_name: auction-auction-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka/
      - SPRING_DATASOURCE_URL=jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/auctiondb
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      discovery-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8084:8080"
    networks:
      - auction-net


  bid-service:
    build: ./bid-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka/
      - SPRING_DATASOURCE_URL=jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/biddb
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    container_name: auction-bid-service
    depends_on:
      discovery-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8088:8080"
    networks:
      - auction-net

  notification-service:
    build: ./notification-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka/
      - SPRING_DATASOURCE_URL=jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/notificationdb
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    container_name: auction-notification-service
    depends_on:
      discovery-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8089:8080"
    networks:
      - auction-net

  payment-service:
    build: ./payment-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka/
      - SPRING_DATASOURCE_URL=jdbc:postgresql://${POSTGRES_HOST}:${POSTGRES_PORT}/paymentdb
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    container_name: auction-payment-service
    depends_on:
      discovery-server:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8090:8080"
    networks:
      - auction-net

networks:
  auction-net:
    driver: bridge

volumes:
  postgres_data: